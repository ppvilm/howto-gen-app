### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String!
}

input GenerateOptionsInput {
  baseUrl: String
  headful: Boolean
  language: String
  model: String
  scriptId: String
}

scalar JSON

type Mutation {
  createWorkspace(id: ID!, name: String, rootPath: String): Workspace!
  deleteScriptSecret(key: String!, scriptId: ID!): Boolean!
  deleteScriptVariable(key: String!, scriptId: ID!): Boolean!
  deleteWorkspaceSecret(key: String!, workspaceId: ID!): Boolean!
  deleteWorkspaceVariable(key: String!, workspaceId: ID!): Boolean!
  exportScript(scriptId: ID!, workspaceId: ID!): JSON!
  importScript(json: JSON!, overwrite: Boolean, scriptId: String, workspaceId: ID!): Script!
  signIn(email: String!, password: String!): AuthPayload!
  signUp(email: String!, password: String!): AuthPayload!
  startGenerate(options: GenerateOptionsInput, prompt: String!, workspaceId: ID!): Script!
  startRun(options: RunOptionsInput, scriptOrPath: String!, workspaceId: ID!): Session!
  upsertScriptSecret(key: String!, scriptId: ID!, value: String!): SecretMeta!
  upsertScriptVariable(key: String!, scriptId: ID!, value: JSON!): Variable!
  upsertWorkspaceSecret(key: String!, value: String!, workspaceId: ID!): SecretMeta!
  upsertWorkspaceVariable(key: String!, value: JSON!, workspaceId: ID!): Variable!
}

type Query {
  me: User
  scriptSecrets(scriptId: ID!): [SecretMeta]
  scriptVariables(scriptId: ID!): [Variable]
  scripts(workspaceId: ID!): [Script]
  sessionArtifacts(sessionId: ID!): SessionArtifacts
  sessions(workspaceId: ID!): [Session]
  workspace(id: ID!): Workspace
  workspaceSecrets(workspaceId: ID!): [SecretMeta]
  workspaceVariables(workspaceId: ID!): [Variable]
  workspaces: [Workspace]
}

input RunOptionsInput {
  headful: Boolean
  sessionId: String
}

type Script {
  id: ID!
  name: String
  path: String!
  workspaceId: ID!
}

type SecretMeta {
  exists: Boolean
  key: String!
  updatedAt: String
}

type Session {
  completedAt: String
  error: String
  id: ID!
  scriptId: ID
  startedAt: String
  status: String
  type: SessionType!
  workspaceId: ID!
}

type SessionArtifacts {
  guideLogUrl: String
  markdownUrl: String
  videoUrl: String
}

enum SessionType {
  PROMPT
  RUN
}

type Subscription {
  onPromptEvents(scriptId: ID!): JSON
  onRunEvents(sessionId: ID!): JSON
}

type User {
  accountId: String!
  email: String!
  id: ID!
}

type Variable {
  key: String!
  updatedAt: String
  value: JSON!
}

type Workspace {
  id: ID!
  name: String
  rootPath: String
}