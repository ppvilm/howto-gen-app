/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSON";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSON";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  GenerateOptionsInput: { // input type
    baseUrl?: string | null; // String
    headful?: boolean | null; // Boolean
    language?: string | null; // String
    model?: string | null; // String
    scriptId?: string | null; // String
  }
  RunOptionsInput: { // input type
    headful?: boolean | null; // Boolean
    sessionId?: string | null; // String
  }
}

export interface NexusGenEnums {
  SessionType: "PROMPT" | "RUN"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  JSON: any
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    token: string; // String!
  }
  Mutation: {};
  Query: {};
  Script: { // root type
    id: string; // ID!
    name?: string | null; // String
    path: string; // String!
    workspaceId: string; // ID!
  }
  SecretMeta: { // root type
    exists?: boolean | null; // Boolean
    key: string; // String!
    updatedAt?: string | null; // String
  }
  Session: { // root type
    completedAt?: string | null; // String
    error?: string | null; // String
    id: string; // ID!
    scriptId?: string | null; // ID
    startedAt?: string | null; // String
    status?: string | null; // String
    type: NexusGenEnums['SessionType']; // SessionType!
    workspaceId: string; // ID!
  }
  SessionArtifacts: { // root type
    guideLogUrl?: string | null; // String
    markdownUrl?: string | null; // String
    videoUrl?: string | null; // String
  }
  Subscription: {};
  User: { // root type
    accountId: string; // String!
    email: string; // String!
    id: string; // ID!
  }
  Variable: { // root type
    key: string; // String!
    updatedAt?: string | null; // String
    value: NexusGenScalars['JSON']; // JSON!
  }
  Workspace: { // root type
    id: string; // ID!
    name?: string | null; // String
    rootPath?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string; // String!
  }
  Mutation: { // field return type
    createWorkspace: NexusGenRootTypes['Workspace']; // Workspace!
    deleteScriptSecret: boolean; // Boolean!
    deleteScriptVariable: boolean; // Boolean!
    deleteWorkspaceSecret: boolean; // Boolean!
    deleteWorkspaceVariable: boolean; // Boolean!
    exportScript: NexusGenScalars['JSON']; // JSON!
    importScript: NexusGenRootTypes['Script']; // Script!
    signIn: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    signUp: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    startGenerate: NexusGenRootTypes['Script']; // Script!
    startRun: NexusGenRootTypes['Session']; // Session!
    upsertScriptSecret: NexusGenRootTypes['SecretMeta']; // SecretMeta!
    upsertScriptVariable: NexusGenRootTypes['Variable']; // Variable!
    upsertWorkspaceSecret: NexusGenRootTypes['SecretMeta']; // SecretMeta!
    upsertWorkspaceVariable: NexusGenRootTypes['Variable']; // Variable!
  }
  Query: { // field return type
    me: NexusGenRootTypes['User'] | null; // User
    scriptSecrets: Array<NexusGenRootTypes['SecretMeta'] | null> | null; // [SecretMeta]
    scriptVariables: Array<NexusGenRootTypes['Variable'] | null> | null; // [Variable]
    scripts: Array<NexusGenRootTypes['Script'] | null> | null; // [Script]
    sessionArtifacts: NexusGenRootTypes['SessionArtifacts'] | null; // SessionArtifacts
    sessions: Array<NexusGenRootTypes['Session'] | null> | null; // [Session]
    workspace: NexusGenRootTypes['Workspace'] | null; // Workspace
    workspaceSecrets: Array<NexusGenRootTypes['SecretMeta'] | null> | null; // [SecretMeta]
    workspaceVariables: Array<NexusGenRootTypes['Variable'] | null> | null; // [Variable]
    workspaces: Array<NexusGenRootTypes['Workspace'] | null> | null; // [Workspace]
  }
  Script: { // field return type
    id: string; // ID!
    name: string | null; // String
    path: string; // String!
    workspaceId: string; // ID!
  }
  SecretMeta: { // field return type
    exists: boolean | null; // Boolean
    key: string; // String!
    updatedAt: string | null; // String
  }
  Session: { // field return type
    completedAt: string | null; // String
    error: string | null; // String
    id: string; // ID!
    scriptId: string | null; // ID
    startedAt: string | null; // String
    status: string | null; // String
    type: NexusGenEnums['SessionType']; // SessionType!
    workspaceId: string; // ID!
  }
  SessionArtifacts: { // field return type
    guideLogUrl: string | null; // String
    markdownUrl: string | null; // String
    videoUrl: string | null; // String
  }
  Subscription: { // field return type
    onPromptEvents: NexusGenScalars['JSON'] | null; // JSON
    onRunEvents: NexusGenScalars['JSON'] | null; // JSON
  }
  User: { // field return type
    accountId: string; // String!
    email: string; // String!
    id: string; // ID!
  }
  Variable: { // field return type
    key: string; // String!
    updatedAt: string | null; // String
    value: NexusGenScalars['JSON']; // JSON!
  }
  Workspace: { // field return type
    id: string; // ID!
    name: string | null; // String
    rootPath: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    token: 'String'
  }
  Mutation: { // field return type name
    createWorkspace: 'Workspace'
    deleteScriptSecret: 'Boolean'
    deleteScriptVariable: 'Boolean'
    deleteWorkspaceSecret: 'Boolean'
    deleteWorkspaceVariable: 'Boolean'
    exportScript: 'JSON'
    importScript: 'Script'
    signIn: 'AuthPayload'
    signUp: 'AuthPayload'
    startGenerate: 'Script'
    startRun: 'Session'
    upsertScriptSecret: 'SecretMeta'
    upsertScriptVariable: 'Variable'
    upsertWorkspaceSecret: 'SecretMeta'
    upsertWorkspaceVariable: 'Variable'
  }
  Query: { // field return type name
    me: 'User'
    scriptSecrets: 'SecretMeta'
    scriptVariables: 'Variable'
    scripts: 'Script'
    sessionArtifacts: 'SessionArtifacts'
    sessions: 'Session'
    workspace: 'Workspace'
    workspaceSecrets: 'SecretMeta'
    workspaceVariables: 'Variable'
    workspaces: 'Workspace'
  }
  Script: { // field return type name
    id: 'ID'
    name: 'String'
    path: 'String'
    workspaceId: 'ID'
  }
  SecretMeta: { // field return type name
    exists: 'Boolean'
    key: 'String'
    updatedAt: 'String'
  }
  Session: { // field return type name
    completedAt: 'String'
    error: 'String'
    id: 'ID'
    scriptId: 'ID'
    startedAt: 'String'
    status: 'String'
    type: 'SessionType'
    workspaceId: 'ID'
  }
  SessionArtifacts: { // field return type name
    guideLogUrl: 'String'
    markdownUrl: 'String'
    videoUrl: 'String'
  }
  Subscription: { // field return type name
    onPromptEvents: 'JSON'
    onRunEvents: 'JSON'
  }
  User: { // field return type name
    accountId: 'String'
    email: 'String'
    id: 'ID'
  }
  Variable: { // field return type name
    key: 'String'
    updatedAt: 'String'
    value: 'JSON'
  }
  Workspace: { // field return type name
    id: 'ID'
    name: 'String'
    rootPath: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createWorkspace: { // args
      id: string; // ID!
      name?: string | null; // String
      rootPath?: string | null; // String
    }
    deleteScriptSecret: { // args
      key: string; // String!
      scriptId: string; // ID!
    }
    deleteScriptVariable: { // args
      key: string; // String!
      scriptId: string; // ID!
    }
    deleteWorkspaceSecret: { // args
      key: string; // String!
      workspaceId: string; // ID!
    }
    deleteWorkspaceVariable: { // args
      key: string; // String!
      workspaceId: string; // ID!
    }
    exportScript: { // args
      scriptId: string; // ID!
      workspaceId: string; // ID!
    }
    importScript: { // args
      json: NexusGenScalars['JSON']; // JSON!
      overwrite?: boolean | null; // Boolean
      scriptId?: string | null; // String
      workspaceId: string; // ID!
    }
    signIn: { // args
      email: string; // String!
      password: string; // String!
    }
    signUp: { // args
      email: string; // String!
      password: string; // String!
    }
    startGenerate: { // args
      options?: NexusGenInputs['GenerateOptionsInput'] | null; // GenerateOptionsInput
      prompt: string; // String!
      workspaceId: string; // ID!
    }
    startRun: { // args
      options?: NexusGenInputs['RunOptionsInput'] | null; // RunOptionsInput
      scriptOrPath: string; // String!
      workspaceId: string; // ID!
    }
    upsertScriptSecret: { // args
      key: string; // String!
      scriptId: string; // ID!
      value: string; // String!
    }
    upsertScriptVariable: { // args
      key: string; // String!
      scriptId: string; // ID!
      value: NexusGenScalars['JSON']; // JSON!
    }
    upsertWorkspaceSecret: { // args
      key: string; // String!
      value: string; // String!
      workspaceId: string; // ID!
    }
    upsertWorkspaceVariable: { // args
      key: string; // String!
      value: NexusGenScalars['JSON']; // JSON!
      workspaceId: string; // ID!
    }
  }
  Query: {
    scriptSecrets: { // args
      scriptId: string; // ID!
    }
    scriptVariables: { // args
      scriptId: string; // ID!
    }
    scripts: { // args
      workspaceId: string; // ID!
    }
    sessionArtifacts: { // args
      sessionId: string; // ID!
    }
    sessions: { // args
      workspaceId: string; // ID!
    }
    workspace: { // args
      id: string; // ID!
    }
    workspaceSecrets: { // args
      workspaceId: string; // ID!
    }
    workspaceVariables: { // args
      workspaceId: string; // ID!
    }
  }
  Subscription: {
    onPromptEvents: { // args
      scriptId: string; // ID!
    }
    onRunEvents: { // args
      sessionId: string; // ID!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}