import { StepResult, GuideResult } from './types';
import { ArtifactManager } from './artifact-manager';

export class MarkdownRenderer {
  static generateStepsBlock(stepResults: StepResult[]): string {
    const stepsMarkdown = stepResults.map((result, index) => {
      const stepNumber = index + 1;
      const step = result.step;
      
      let title = `Step ${stepNumber}`;
      let description = '';

      switch (step.type) {
        case 'goto':
          title = `Step ${stepNumber}: Navigate`;
          if (step.url) {
            description = `Go to ${step.url}`;
          } else if (step.label) {
            description = `Navigate to ${step.label}`;
          }
          break;
        case 'type':
          title = `Step ${stepNumber}: Enter Information`;
          if (step.sensitive) {
            description = `Enter value in ${step.label} field`;
          } else {
            description = `Enter "${step.value}" in ${step.label} field`;
          }
          break;
        case 'click':
          title = `Step ${stepNumber}: Click`;
          description = `Click on ${step.label}`;
          break;
        case 'assert':
          title = `Step ${stepNumber}: Verify`;
          description = `Verify that ${step.label} is visible`;
          break;
        case 'assert_page':
          title = `Step ${stepNumber}: Verify Page`;
          if (step.url) {
            description = `Verify that you are on ${step.url}`;
          } else if (step.label) {
            description = `Verify that you are on ${step.label} page`;
          }
          break;
        case 'tts_start':
          title = `Step ${stepNumber}: Start Voice`;
          description = `Begin generating voice narration for "${step.label}"`;
          if (step.text && step.text.length > 100) {
            description += `\n\nText: "${step.text.substring(0, 100)}..."`;
          } else if (step.text) {
            description += `\n\nText: "${step.text}"`;
          }
          break;
        case 'tts_wait':
          title = `Step ${stepNumber}: Wait for Voice`;
          description = `Wait for voice generation "${step.label}" to complete`;
          break;
        case 'keypress':
          title = `Step ${stepNumber}: Keypress`;
          description = `Press ${step.key} key`;
          break;
      }

      if (step.note) {
        description += `\n\n${step.note}`;
      }

      let stepMarkdown = `### ${title}\n\n${description}\n\n`;
      
      // Only include screenshot if one was taken
      if (result.screenshot) {
        const screenshotPath = ArtifactManager.getScreenshotRelativePath(result.screenshot);
        stepMarkdown += `![${title}](${screenshotPath})\n\n`;
      }

      if (!result.success && result.error) {
        stepMarkdown += `> ⚠️ **Error:** ${result.error}\n\n`;
      }

      return stepMarkdown;
    }).join('');

    return `## Steps\n\n${stepsMarkdown}`;
  }

  static injectStepsIntoMarkdown(originalBody: string, stepsBlock: string): string {
    const placeholder = '<!-- STEPS:AUTOGENERATED -->';
    
    if (originalBody.includes(placeholder)) {
      return originalBody.replace(placeholder, stepsBlock);
    } else {
      return `${originalBody}\n\n${stepsBlock}`;
    }
  }

  static generateCompleteGuide(result: GuideResult): string {
    const stepsBlock = this.generateStepsBlock(result.stepResults);
    return this.injectStepsIntoMarkdown(result.originalBody, stepsBlock);
  }
}